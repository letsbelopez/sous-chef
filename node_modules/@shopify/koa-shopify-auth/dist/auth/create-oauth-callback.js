"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = __importDefault(require("querystring"));
var errors_1 = __importDefault(require("./errors"));
var validate_hmac_1 = __importDefault(require("./validate-hmac"));
function createOAuthCallback(config) {
    return function oAuthCallback(ctx) {
        return __awaiter(this, void 0, void 0, function () {
            var query, cookies, code, hmac, shop, nonce, apiKey, secret, afterAuth, accessTokenQuery, accessTokenResponse, accessTokenData, accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = ctx.query, cookies = ctx.cookies;
                        code = query.code, hmac = query.hmac, shop = query.shop, nonce = query.state;
                        apiKey = config.apiKey, secret = config.secret, afterAuth = config.afterAuth;
                        if (nonce == null || cookies.get('shopifyNonce') !== nonce) {
                            ctx.throw(403, errors_1.default.NonceMatchFailed);
                        }
                        if (shop == null) {
                            ctx.throw(400, errors_1.default.ShopParamMissing);
                            return [2 /*return*/];
                        }
                        if (validate_hmac_1.default(hmac, secret, query) === false) {
                            ctx.throw(400, errors_1.default.InvalidHMAC);
                            return [2 /*return*/];
                        }
                        accessTokenQuery = querystring_1.default.stringify({
                            code: code,
                            client_id: apiKey,
                            client_secret: secret,
                        });
                        return [4 /*yield*/, fetch("https://" + shop + "/admin/oauth/access_token", {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'Content-Length': Buffer.byteLength(accessTokenQuery).toString(),
                                },
                                body: accessTokenQuery,
                            })];
                    case 1:
                        accessTokenResponse = _a.sent();
                        if (!accessTokenResponse.ok) {
                            ctx.throw(401, errors_1.default.AccessTokenFetchFailure);
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, accessTokenResponse.json()];
                    case 2:
                        accessTokenData = _a.sent();
                        accessToken = accessTokenData.access_token;
                        if (ctx.session) {
                            ctx.session.shop = shop;
                            ctx.session.accessToken = accessToken;
                        }
                        ctx.state.shopify = {
                            shop: shop,
                            accessToken: accessToken,
                        };
                        if (!afterAuth) return [3 /*break*/, 4];
                        return [4 /*yield*/, afterAuth(ctx)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
}
exports.default = createOAuthCallback;
